This file is a merged representation of a subset of the codebase, containing files not matching ignore patterns, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of a subset of the repository's contents that is considered the most important context.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching these patterns are excluded: **/*.svg
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.gitignore
eslint.config.mjs
next.config.ts
package.json
postcss.config.mjs
README.md
src/api/cocart.ts
src/app/(main)/page.tsx
src/app/(main)/products/[slug]/loading.tsx
src/app/(main)/products/[slug]/page.tsx
src/app/globals.css
src/app/layout.tsx
src/app/loading.tsx
src/components/AddToCartButton.tsx
src/components/CartSidebar.tsx
src/components/Header.tsx
src/components/ProductCard.tsx
src/context/CartContext.tsx
src/lib/types.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".gitignore">
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.*
.yarn/*
!.yarn/patches
!.yarn/plugins
!.yarn/releases
!.yarn/versions

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*
.pnpm-debug.log*

# env files (can opt-in for committing if needed)
.env*

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
</file>

<file path="eslint.config.mjs">
import { dirname } from "path";
import { fileURLToPath } from "url";
import { FlatCompat } from "@eslint/eslintrc";

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

const compat = new FlatCompat({
  baseDirectory: __dirname,
});

const eslintConfig = [
  ...compat.extends("next/core-web-vitals", "next/typescript"),
];

export default eslintConfig;
</file>

<file path="next.config.ts">
import type { NextConfig } from "next";

const wooCommerceUrl = new URL(
  process.env.NEXT_PUBLIC_WOOCOMMERCE_URL || "http://localhost:10018"
);

const nextConfig: NextConfig = {
  images: {
    // remotePatterns: [
    //   {
    //     protocol: wooCommerceUrl.protocol.replace(":", ""),
    //     hostname: wooCommerceUrl.hostname,
    //     port: wooCommerceUrl.port,
    //     pathname: "**",
    //   },
    // ],
  },
};

export default nextConfig;
</file>

<file path="package.json">
{
  "name": "7rings-headless-frontend",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --turbopack",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "react": "19.1.0",
    "react-dom": "19.1.0",
    "next": "15.4.5"
  },
  "devDependencies": {
    "typescript": "^5",
    "@types/node": "^20",
    "@types/react": "^19",
    "@types/react-dom": "^19",
    "@tailwindcss/postcss": "^4",
    "tailwindcss": "^4",
    "eslint": "^9",
    "eslint-config-next": "15.4.5",
    "@eslint/eslintrc": "^3"
  }
}
</file>

<file path="postcss.config.mjs">
const config = {
  plugins: ["@tailwindcss/postcss"],
};

export default config;
</file>

<file path="README.md">
This is a [Next.js](https://nextjs.org) project bootstrapped with [`create-next-app`](https://nextjs.org/docs/app/api-reference/cli/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `app/page.tsx`. The page auto-updates as you edit the file.

This project uses [`next/font`](https://nextjs.org/docs/app/building-your-application/optimizing/fonts) to automatically optimize and load [Geist](https://vercel.com/font), a new font family for Vercel.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/app/building-your-application/deploying) for more details.
</file>

<file path="src/api/cocart.ts">
import { Product, Cart } from "@/lib/types";

const API_URL = `${process.env.NEXT_PUBLIC_WOOCOMMERCE_URL}`;

async function fetcher<T>(url: string, options: RequestInit = {}): Promise<T> {
  const headers = {
    "Content-Type": "application/json",
    ...options.headers,
  };

  try {
    const response = await fetch(url, {
      ...options,
      headers,
      // Caching can be aggressive, revalidate to get fresh cart/product data
      next: { revalidate: 5 },
    });

    if (!response.ok) {
      const errorBody = await response.json();
      throw new Error(
        errorBody.message || "An error occurred while fetching data."
      );
    }
    return response.json();
  } catch (error) {
    console.error("API Fetch Error:", error);
    throw error;
  }
}

export async function getProducts(): Promise<Product[]> {
  return fetcher<Product[]>(`${API_URL}/get-products`);
}

export async function getProductBySlug(slug: string): Promise<Product | null> {
    try {
        const products = await fetcher<Product[]>(`${API_URL}/products?slug=${slug}`);
        return products.length > 0 ? products[0] : null;
    } catch (error) {
        console.error(`Error fetching product by slug ${slug}:`, error);
        return null;
    }
}

export async function getCart(): Promise<Cart> {
  return fetcher<Cart>(`${API_URL}/cart`);
}

export async function addToCart(
  productId: number,
  quantity: number
): Promise<Cart> {
  return fetcher<Cart>(`${API_URL}/cart/add-item`, {
    method: "POST",
    body: JSON.stringify({
      id: String(productId),
      quantity: String(quantity),
    }),
  });
}
</file>

<file path="src/app/(main)/page.tsx">
import { getProducts } from "@/api/cocart";
import { ProductCard } from "@/components/ProductCard";

export default async function HomePage() {
  const products = await getProducts();

  if (!products || products.length === 0) {
    return <p>No products found.</p>;
  }

  return (
    <div className="grid grid-cols-1 sm:grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-6">
      {products.map((product) => (
        <ProductCard key={product.id} product={product} />
      ))}
    </div>
  );
}
</file>

<file path="src/app/(main)/products/[slug]/loading.tsx">
export default function ProductLoading() {
  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12 animate-pulse">
      {/* Image Skeleton */}
      <div className="aspect-square w-full bg-neutral-200 dark:bg-neutral-700 rounded-lg"></div>

      {/* Details Skeleton */}
      <div className="flex flex-col gap-4">
        <div className="h-10 bg-neutral-200 dark:bg-neutral-700 rounded w-3/4"></div>
        <div className="h-8 bg-neutral-200 dark:bg-neutral-700 rounded w-1/4"></div>
        <div className="space-y-2">
            <div className="h-4 bg-neutral-200 dark:bg-neutral-700 rounded w-full"></div>
            <div className="h-4 bg-neutral-200 dark:bg-neutral-700 rounded w-5/6"></div>
        </div>
        <div className="h-12 bg-neutral-300 dark:bg-neutral-600 rounded w-full mt-4"></div>
      </div>
    </div>
  );
}
</file>

<file path="src/app/(main)/products/[slug]/page.tsx">
import { notFound } from "next/navigation";
import Image from "next/image";
import { getProductBySlug } from "@/api/cocart";
import { AddToCartButton } from "@/components/AddToCartButton";

interface ProductPageProps {
  params: {
    slug: string;
  };
}

export default async function ProductPage({ params }: ProductPageProps) {
  const product = await getProductBySlug(params.slug);

  if (!product) {
    notFound();
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-8 lg:gap-12">
      {/* Image Gallery */}
      <div className="relative aspect-square w-full">
         <Image
            src={product.images[0]?.src || "/placeholder.svg"}
            alt={product.name}
            fill
            className="object-cover rounded-lg border"
            priority
        />
      </div>

      {/* Product Details */}
      <div className="flex flex-col gap-4">
        <h1 className="text-3xl font-bold">{product.name}</h1>
        <p
          className="text-2xl font-semibold"
          dangerouslySetInnerHTML={{ __html: product.price_html || `${product.price} USD` }}
        />
        <div
          className="prose dark:prose-invert"
          dangerouslySetInnerHTML={{ __html: product.short_description }}
        />
        
        {product.stock_status === 'instock' ? (
          <AddToCartButton productId={product.id} />
        ) : (
          <p className="text-red-500 font-bold">Out of Stock</p>
        )}
      </div>
    </div>
  );
}
</file>

<file path="src/app/globals.css">
@import "tailwindcss";

:root {
  --background: #ffffff;
  --foreground: #171717;
}

@theme inline {
  --color-background: var(--background);
  --color-foreground: var(--foreground);
  --font-sans: var(--font-geist-sans);
  --font-mono: var(--font-geist-mono);
}

@media (prefers-color-scheme: dark) {
  :root {
    --background: #0a0a0a;
    --foreground: #ededed;
  }
}

body {
  background: var(--background);
  color: var(--foreground);
  font-family: Arial, Helvetica, sans-serif;
}
</file>

<file path="src/app/layout.tsx">
import type { Metadata } from "next";
import { Geist } from "next/font/google";
import "./globals.css";
import { CartProvider } from "@/context/CartContext";
import { Header } from "@/components/Header";
import { CartSidebar } from "@/components/CartSidebar";

const geistSans = Geist({
  variable: "--font-geist-sans",
  subsets: ["latin"],
});

export const metadata: Metadata = {
  title: "7Rings Headless Store",
  description: "An eCommerce store built with Next.js and WooCommerce.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <body className={`${geistSans.variable} font-sans antialiased`}>
        <CartProvider>
          <Header />
          <main className="container mx-auto p-4 sm:p-6 md:p-8">
            {children}
          </main>
          <CartSidebar />
        </CartProvider>
      </body>
    </html>
  );
}
</file>

<file path="src/app/loading.tsx">
export default function Loading() {
  return (
    <div className="flex justify-center items-center h-screen">
      <div className="animate-spin rounded-full h-32 w-32 border-t-2 border-b-2 border-blue-500"></div>
    </div>
  );
}
</file>

<file path="src/components/AddToCartButton.tsx">
"use client";

import { useState } from "react";
import { useCart } from "@/context/CartContext";

interface AddToCartButtonProps {
  productId: number;
}

export function AddToCartButton({ productId }: AddToCartButtonProps) {
  const { addToCart } = useCart();
  const [isLoading, setIsLoading] = useState(false);

  const handleClick = async () => {
    setIsLoading(true);
    await addToCart(productId, 1);
    setIsLoading(false);
  };

  return (
    <button
      onClick={handleClick}
      disabled={isLoading}
      className="w-full bg-blue-600 text-white font-bold py-3 px-6 rounded-lg transition-colors hover:bg-blue-700 disabled:bg-neutral-400 disabled:cursor-not-allowed"
    >
      {isLoading ? "Adding..." : "Add to Cart"}
    </button>
  );
}
</file>

<file path="src/components/CartSidebar.tsx">
"use client";

import Image from "next/image";
import { useCart } from "@/context/CartContext";

export function CartSidebar() {
  const { cart, isCartSidebarOpen, closeCartSidebar } = useCart();
  const checkoutUrl = process.env.NEXT_PUBLIC_CHECKOUT_URL;

  if (!isCartSidebarOpen) return null;

  return (
    <>
      {/* Overlay */}
      <div
        className="fixed inset-0 bg-black/50 z-20"
        onClick={closeCartSidebar}
      />
      
      {/* Sidebar */}
      <aside className="fixed top-0 right-0 h-full w-full max-w-sm bg-background z-30 flex flex-col">
        <div className="flex items-center justify-between p-4 border-b">
          <h2 className="text-xl font-semibold">Shopping Cart</h2>
          <button onClick={closeCartSidebar} className="p-2 rounded-full hover:bg-neutral-100 dark:hover:bg-neutral-800">
            &times;
          </button>
        </div>

        {cart && cart.items.length > 0 ? (
          <div className="flex-1 overflow-y-auto p-4">
            <ul className="divide-y">
              {cart.items.map((item) => (
                <li key={item.item_key} className="flex items-center gap-4 py-4">
                  <div className="relative h-20 w-20 rounded-md overflow-hidden border">
                    <Image
                      src={item.featured_image || "/placeholder.svg"}
                      alt={item.name}
                      fill
                      className="object-cover"
                    />
                  </div>
                  <div className="flex-1">
                    <p className="font-semibold">{item.name}</p>
                    <p className="text-sm text-foreground/70">Quantity: {item.quantity.value}</p>
                  </div>
                  <p className="font-medium" dangerouslySetInnerHTML={{ __html: item.price }}/>
                </li>
              ))}
            </ul>
          </div>
        ) : (
          <div className="flex-1 flex items-center justify-center">
            <p>Your cart is empty.</p>
          </div>
        )}

        {cart && cart.items.length > 0 && (
          <div className="border-t p-4 space-y-4">
            <div className="flex justify-between font-bold text-lg">
              <span>Subtotal:</span>
              <span dangerouslySetInnerHTML={{ __html: cart.totals.subtotal }}/>
            </div>
            <a
              href={checkoutUrl}
              className="block w-full text-center bg-green-600 text-white font-bold py-3 px-6 rounded-lg transition-colors hover:bg-green-700"
            >
              Proceed to Checkout
            </a>
          </div>
        )}
      </aside>
    </>
  );
}
</file>

<file path="src/components/Header.tsx">
"use client";

import Link from "next/link";
import { useCart } from "@/context/CartContext";

export function Header() {
  const { cart, openCartSidebar } = useCart();
  const itemCount = cart?.item_count ?? 0;

  return (
    <header className="sticky top-0 bg-background/80 backdrop-blur-md z-10">
      <nav className="container mx-auto flex items-center justify-between p-4 border-b">
        <Link href="/" className="text-xl font-bold hover:opacity-80 transition-opacity">
          7Rings Store
        </Link>
        <button
          onClick={openCartSidebar}
          className="relative rounded-full p-2 transition-colors hover:bg-neutral-100 dark:hover:bg-neutral-800"
          aria-label={`Open cart with ${itemCount} items`}
        >
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            strokeWidth="2"
            strokeLinecap="round"
            strokeLinejoin="round"
          >
            <circle cx="9" cy="21" r="1" />
            <circle cx="20" cy="21" r="1" />
            <path d="M1 1h4l2.68 13.39a2 2 0 0 0 2 1.61h9.72a2 2 0 0 0 2-1.61L23 6H6" />
          </svg>
          {itemCount > 0 && (
            <span className="absolute top-0 right-0 block h-4 w-4 rounded-full bg-blue-500 text-white text-xs font-medium text-center">
              {itemCount}
            </span>
          )}
        </button>
      </nav>
    </header>
  );
}
</file>

<file path="src/components/ProductCard.tsx">
import Link from "next/link";
import Image from "next/image";
import { Product } from "@/lib/types";

interface ProductCardProps {
  product: Product;
}

export function ProductCard({ product }: ProductCardProps) {
  const primaryImage = product.images[0]?.src;

  return (
    <Link
      href={`/products/${product.slug}`}
      className="group block border rounded-lg overflow-hidden transition-shadow hover:shadow-lg"
    >
      <div className="relative aspect-square w-full bg-neutral-100 dark:bg-neutral-800">
        {primaryImage && (
          <Image
            src={primaryImage}
            alt={product.name}
            fill
            className="object-cover transition-transform group-hover:scale-105"
          />
        )}
      </div>
      <div className="p-4">
        <h3 className="font-semibold text-lg truncate">{product.name}</h3>
        <p
          className="text-foreground/80"
          dangerouslySetInnerHTML={{ __html: product.price_html || `${product.price} USD` }}
        />
      </div>
    </Link>
  );
}
</file>

<file path="src/context/CartContext.tsx">
"use client";

import {
  createContext,
  useContext,
  useState,
  useEffect,
  ReactNode,
} from "react";
import { Cart, CartItem } from "@/lib/types";
import { getCart, addToCart as apiAddToCart } from "@/api/cocart";

interface CartContextType {
  cart: Cart | null;
  loading: boolean;
  isCartSidebarOpen: boolean;
  addToCart: (productId: number, quantity: number) => Promise<void>;
  openCartSidebar: () => void;
  closeCartSidebar: () => void;
}

const CartContext = createContext<CartContextType | undefined>(undefined);

export function CartProvider({ children }: { children: ReactNode }) {
  const [cart, setCart] = useState<Cart | null>(null);
  const [loading, setLoading] = useState(true);
  const [isCartSidebarOpen, setIsCartSidebarOpen] = useState(false);

  useEffect(() => {
    async function fetchInitialCart() {
      try {
        setLoading(true);
        const initialCart = await getCart();
        setCart(initialCart);
      } catch (error) {
        console.error("Failed to fetch initial cart:", error);
      } finally {
        setLoading(false);
      }
    }
    fetchInitialCart();
  }, []);

  const addToCart = async (productId: number, quantity: number) => {
    try {
      const updatedCart = await apiAddToCart(productId, quantity);
      setCart(updatedCart);
      setIsCartSidebarOpen(true);
    } catch (error) {
      console.error("Failed to add item to cart:", error);
      alert("Error: Could not add item to cart.");
    }
  };
  
  const openCartSidebar = () => setIsCartSidebarOpen(true);
  const closeCartSidebar = () => setIsCartSidebarOpen(false);

  return (
    <CartContext.Provider
      value={{ cart, loading, addToCart, isCartSidebarOpen, openCartSidebar, closeCartSidebar }}
    >
      {children}
    </CartContext.Provider>
  );
}

export function useCart() {
  const context = useContext(CartContext);
  if (context === undefined) {
    throw new Error("useCart must be used within a CartProvider");
  }
  return context;
}
</file>

<file path="src/lib/types.ts">
export interface ProductImage {
  id: number;
  src: string;
  name: string;
  alt: string;
}

export interface Product {
  id: number;
  name: string;
  slug: string;
  permalink: string;
  description: string;
  short_description: string;
  price: string;
  regular_price: string;
  sale_price: string;
  on_sale: boolean;
  images: ProductImage[];
  stock_status: "instock" | "outofstock";
}

export interface CartItem {
  item_key: string;
  id: number;
  name: string;
  quantity: {
    value: number;
  };
  price: string;
  line_total: number;
  featured_image: string;
}

export interface Cart {
  items: CartItem[];
  totals: {
    subtotal: string;
    total: string;
  };
  item_count: number;
}
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "ES2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true,
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    }
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
</file>

</files>
